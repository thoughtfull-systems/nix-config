* Bootstrapping (2023-05-20)
Currently, run ~/bin/boostrap-minimal.bash~ and it does several things, some on the source and some
on the target.

The part done on the source is mostly about re-encrypting secrets with a bootstrap key (i.e. the
installation ssh host key).  The public key must be scp'ed to the source, the secrets must be
re-encrypted, the new secrets must be committed and pushed, the new secrets must be pulled on the
target, and the private key must be copied to ~/mnt/tmp/~ so it is accessible to ~nixos-install~.
This is all pretty involved and complicated.

After the installation, it is also complicated to remove the bootstrap key and setup the new
installed host key (I get the order wrong every time and end up bricking my install except that I
can ssh in as root and fix it).

Other options:

- use an encrypted bootstrap key.  It would have to be scp'ed from the source (since it cannot be
  decrypted at the target), but it would mitigate the need to commit and push from the source.  The
  downside is there's a private key in the public repo that could decrypt all the secrets, but it
  would also be encrypted.  It would also be (publicly?) accessible on every installed machine, and
  calls into question the need for any other key.  For some reason I think it's better to depend on
  each host's ssh host key, but why?  There's also a bootstapping issue in that the bootstrap key
  has to be decrypted, so I'd always have to install from a source machine that has access to either
  the bootstap key or some other key (probably my ssh key or yubikey).
- generate a bootstrap key.  Instead of using the install host key, generate a bootstrap key.  I'd
  then have to scp it to the target, and I'd have the same complications removing it after
  installation, so I'm not sure what advantage this would have.
- use my yubikey.  This would be the ideal.  If I could just plug in my yubikey during the bootstrap
  process that would be ideal, but I couldn't figure it out.  It might be worth revisiting.  I think
  the issue was needing some nixos configuration that isn't available on the install ISO and isn't
  easily reconfigured before install.  A workaround would be to build my own installation iso with
  the necessary configuration, but that seems like a big lift that could be complicated, fragile,
  and is a rabbit hole.  Another option would be a staged bootstrapping where I use the ISO to
  install the system, and from there install the final system.  The intermediate system could have
  support for yubikey.

There are some other issues with the bootstrap script.  I thought it was pretty robust, but it is
still kind of fragile.  The process of unmounting existing partitions uses a path and a ~realpath~
because some partitions are links that end up getting mounted as their targets.  I think this could
be fixed by just unmounting the mounted path, instead of the device.
